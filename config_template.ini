[defaults]
# The two values in this section will be applied to the sections named in the sources section below. Default values will
# be overwritten by values of the same name in those sections
header_row_num = 0
ignored_row(s) = -1

[sources]
# Specify source names and the path (absolute or relative) to the corresponding csv in this section. Add a section for
# that source below by the same name you put here. Fill out values for target_column(s), header_row_num, ignored_rows, &
# match by. Sources are prioritized in the order you put them below (first is highest priority). Higher priority sources
# are parsed first, added to the output first, and if --strict is used, the first source is used to match successive
# sources. If data from two different sources collides (two values for same row, column), the higher priority source is
# used. Sources whose data is matched to an existing row via data from match_by will only fill empty fields.
# Ex:
source_name = /path/to/csv

# Ex continued:
[source_name]
target_column(s) = field5,field9
# Optionally give new names for target column(s) to assume in the output (matches based on order)
# If there are differing numbers of column names vs target columns, then column names are used in the order they are
# given and matched to corresponding target columns until either one runs out. If column names run out first, then
# remaining target columns will not be given a new name. If target columns run out first, then the excess column names
# are not used. Columns listed in match_by will be included in the output as if they were a target column (columns in
# both target columns and match by will only be included in the output once). Match by columns come first in the output
# however (first as in furthest left).
column_name(s) = new name for field5,name for field9,excess names don't get used
match_by = field1,field2,etc
# works the same as column_name(s)
match_by_name(s) = name1,name2,etc
header_row_num =
ignored_row(s) =

# defaults do not apply to sections below here
# =============================================================================
[output]
file_name = output.csv
# unmatched data is only put into a file if you give a file name below
unmatched_file_name =
# valid dialects: unix, excel, excel_tab
dialect = excel

[source_rules]
# what is valid for what source and what is missing from some sources that appear in others?

[field_rules]
# Field validation:
# This section is entirely optional.
#
# Put field names (headers) of the output and on the other side of the equal sign put a regex for data to be validated
# by. You do not need to wrap your regular expression in /. Data that would be transferred to the column of the given
# header that does not match the given regular expression will not be transferred.
# Ex:
IPv4 address = ^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$